#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>

class Planta {
protected:
    std::string nume;
    double nevoieApa;
    double nevoieLumina;

public:
    Planta(std::string nume, double nevoieApa, double nevoieLumina)
        : nume(nume), nevoieApa(nevoieApa), nevoieLumina(nevoieLumina) {}

    virtual void descriere() {
        std::cout << "Planta " << nume << " are nevoie de " << nevoieApa << " litri de apa si " << nevoieLumina << " ore de lumina pe zi.\n";
    }

    virtual void emanaMiros() = 0;

    virtual ~Planta() {};
friend std::istream& operator>>(std::istream& in, Planta& p) {
        in >> p.nume >> p.nevoieApa >> p.nevoieLumina;
        return in;
    }

};

class Floare : public Planta {
    std::string culoare;
    std::string parfum;

public:
    Floare(std::string nume, double nevoieApa, double nevoieLumina, std::string culoare, std::string parfum)
        : Planta(nume, nevoieApa, nevoieLumina), culoare(culoare), parfum(parfum) {}
    Floare() : Planta("", 0, 0), culoare(""), parfum("") {}
    void descriere() override {
        std::cout << "Floarea " << nume << " de culoare " << culoare << " are nevoie de " << nevoieApa << " litri de apa si " << nevoieLumina << " ore de lumina pe zi.\n";
    }

    void emanaMiros() override {
        std::cout << "Floarea " << nume << " emana un miros " << parfum << ".\n";
    }
friend std::istream& operator>>(std::istream& in, Floare& f) {
        in >> static_cast<Planta&>(f) >> f.culoare >> f.parfum;
        return in;
    }
    ~Floare() {
        std::cout << "destructor Floare\n";
    }
};

class Arbore : public Planta {
    std::string tip;

public:
    double inaltime;
    Arbore(std::string nume, double nevoieApa, double nevoieLumina, double inaltime, std::string tip)
        : Planta(nume, nevoieApa, nevoieLumina), inaltime(inaltime), tip(tip) {}
    Arbore() : Planta("", 0, 0), inaltime(0), tip("") {}
    void descriere() override {
        std::cout << "Arborele " << nume << " de tip " << tip << " are nevoie de " << nevoieApa << " litri de apa si " << nevoieLumina << " ore de lumina pe zi si are inaltimea de " << inaltime << " metri.\n";
    }

    void emanaMiros() override {
        if (tip == "foios") {
            std::cout << "Arborele " << nume << " emana un miros usor dulceag cu tente lemnoase.\n";
        } else if (tip == "conifer") {
            std::cout << "Arborele " << nume << " emana un miros subtil cu tente rasinoase.\n";
        }
    }
friend std::istream& operator>>(std::istream& in, Arbore& a) {
        in >> static_cast<Planta&>(a) >> a.inaltime >> a.tip;
        return in;
    }
    ~Arbore() {
        std::cout << "destructor Arbore\n";
    }

};
template <typename T>
std::vector<T> selectare(const std::vector<Planta*>& plante) {
    std::vector<T> rez;
    for (Planta* planta : plante) {
        T* p = dynamic_cast<T*>(planta);
        if (p) {
            rez.push_back(*p);
        }
    }
    return rez;
}
class Gradina {
    std::vector<Planta*> plante;

public:
    Gradina(const std::string& filename) {
        std::ifstream in(filename);
        if (!in) {
            std::cerr << "nu se poate deschide fisierul " << filename << std::endl;
            return;
        }
        int n;
        in >> n;
        std::string tip;
        for (int i = 0; i < n; ++i) {
            in >> tip;
            if (tip == "Floare") {
                Floare* f = new Floare;
                in >> *f;
                plante.push_back(f);
            } else if (tip == "Arbore") {
                Arbore* a = new Arbore;
                in >> *a;
                plante.push_back(a);
            }
        }

        in.close();
    }

    ~Gradina() {
        for (Planta* planta : plante) {
            delete planta;
        }
    }
    void adaugaPlanta(Planta* p) {
        plante.push_back(p);
    }
    void eliminaPlanta(std::string nume) {

    }

    void ghid() {
        for (Planta* planta : plante) {
            planta->descriere();
        }
    }
    void miroaseFlori() {
        std::vector<Floare> flori = selectare<Floare>(plante);
        for (Floare& f : flori) {
            f.emanaMiros();
        }
    }
     void sortareArbori() {
        std::vector<Arbore> arbori = selectare<Arbore>(plante);
        std::sort(arbori.begin(), arbori.end(), [](const Arbore& a1, const Arbore& a2) {
            return a1.inaltime < a2.inaltime;
        });
        for (Arbore& x : arbori) {
            x.descriere();
        }
    }

};




int main() {
    /*
    Floare f1();
    Floare f2("lalea", 2, 3, "rosu", "parfum1");
    Arbore a1("stejar", 5, 6, 10, "foios");
    Arbore a2();
    */

    Gradina g1 = Gradina("plante.in");
    g1.ghid();
    g1.miroaseFlori();
    g1.sortareArbori();
    g1.eliminaPlanta("lalea");

    return 0;
}